/*
 * fis
 * http://fis.baidu.com/
 */

'use strict';

// 日志类型，十六进制表示。
exports.L_ALL    = 0x01111; // 4369
exports.L_NOTIC  = 0x00001; // 1
exports.L_DEBUG  = 0x00010; // 16
exports.L_WARNI  = 0x00100; // 256
exports.L_ERROR  = 0x01000; // 4096
exports.L_NORMAL = 0x01101; // 4353

exports.level = exports.L_NORMAL; // 默认日志级别
exports.throw = false; // 是否抛出错误信息
//参考 https://msdn.microsoft.com/zh-cn/library/az24scfc.aspx
//'\u0007' 为报警 (bell) 符。
exports.alert = false; // 是否发出警报音

// 输出格式化后的当前时间，如："16:48:42.0710"。默认带上毫秒。
exports.now = function(withoutMilliseconds){
    var d = new Date(), str;
    str = [
        d.getHours(),
        d.getMinutes(),
        d.getSeconds()
    ].join(':').replace(/\b\d\b/g, '0$&'); // "6:8:2.0710" => "06:08:02.0710"
    if(!withoutMilliseconds){
        str += '.' + ('00' + d.getMilliseconds()).substr(-4);
    }
    return str;
};

// 根据类型及内容输出日志
function log(type, msg, code){
    code = code || 0;
    if((exports.level & code) > 0){ // & 操作
        var listener = exports.on[type];
        if(listener){
            listener(msg);
        }
        exports.on.any(type, msg);
    }
}

// debug日志
exports.debug = function(msg){
    log('debug', exports.now() + ' ' + msg, exports.L_DEBUG);
};

// notice日志
exports.notice = function(msg){
    log('notice', msg, exports.L_NOTIC);
};

// warning日志
exports.warning = function(msg){
    log('warning', msg, exports.L_WARNI);
};

// error日志
exports.error = function(err){
    if(!(err instanceof Error)){
        err = new Error(err.message || err);
    }
    //参考 https://msdn.microsoft.com/zh-cn/library/az24scfc.aspx
    //'\u0007' 为报警 (bell) 符。
    if(exports.alert){
        err.message += '\u0007'; // 添加警报音
    }
    if(exports.throw){ // 抛出错误，中断控制台
        throw err
    } else {
        log('error', err.message, exports.L_ERROR);
        process.exit(1); // 退出当前进程，参考 https://nodejs.org/api/process.html#process_exit_codes
    }
};

// 根据不同日志类型输出不同内容
// 参考 https://nodejs.org/api/process.html#process_process_stdout
exports.on = {
    any     : function(type, msg){},
    debug   : function(msg){ process.stdout.write('\n [DEBUG] ' + msg + '\n'); },
    notice  : function(msg){ process.stdout.write('\n [NOTIC] ' + msg + '\n'); },
    warning : function(msg){ process.stdout.write('\n [WARNI] ' + msg + '\n'); },
    error   : function(msg){ process.stdout.write('\n [ERROR] ' + msg + '\n'); }
};