#!/usr/bin/env node
//noinspection JSUnresolvedFunction,JSUnresolvedVariable
/**
 * Generate xtemplate function by xtemplate file using kissy xtemplate.
 * @author yiminghe@gmail.com
 */
var program = require('./lib/commander');
program
    .option('-p, --package-path <packagePath>', 'Set kissy package path')
    .option('-e, --encoding [encoding]', 'Set xtemplate file encoding', 'utf-8')
    .option('-w, --watch', 'Watch xtemplate file change')
    .parse(process.argv);

var S = require('../build/kissy-nodejs'),
    chokidar = require('chokidar'),
/*jshint camelcase: false*/
    jsBeautify = require('js-beautify').js_beautify,
    fs = require('fs'),
    path = require('path'),
    packagePath = program.packagePath,
    encoding = program.encoding,
    cwd = process.cwd();

packagePath = path.resolve(cwd, packagePath);

var tplTemplate = '' +
    '/*\n' +
    '  Generated by kissy-tpl2mod.' +
    '*/\n' +
    'KISSY.add(\'{code}\');';

function normalizeSlash(str) {
    return str.replace(/\\/g, '/');
}

function myJsBeautify(str) {
    var opts = {
        'indent_size': '4',
        'indent_char': ' ',
        'preserve_newlines': true,
        'brace_style': 'collapse',
        'keep_array_indentation': false,
        'space_after_anon_function': true
    };
    return jsBeautify(str, opts);
}

S.use('xtemplate/compiler', function (S, XTemplateCompiler) {
    function compile(tpl, modulePath) {
        var tplContent = fs.readFileSync(tpl, encoding);
        var moduleCode = myJsBeautify(
            '/** Compiled By kissy-xtemplate */\n' +
                'KISSY.add(function(S,require,exports,module){\n' +
                '/*jshint quotmark:false, loopfunc:true, indent:false, asi:true, unused:false, boss:true*/\n' +
                'return ' + XTemplateCompiler.compileToStr(tplContent)) + ';\n' +
            '});';
        fs.writeFileSync(modulePath, moduleCode, encoding);
        console.info('generate xtpl module: ' + modulePath + ' at ' + (new Date().toLocaleString()));
    }

    function process(filePath) {
        var modulePath;
        if (S.endsWith(filePath, '.xtpl.html')||S.endsWith(filePath, '-xtpl.html')) {
            modulePath = filePath.replace(/[.-]xtpl\.html$/, '-xtpl.js');
            compile(filePath, modulePath);
        } else if (S.endsWith(filePath, '.tpl.html')) {
            modulePath = filePath.replace(/\.tpl\.html$/, '-tpl.js');
            var tplContent = fs.readFileSync(filePath, encoding);
            tplContent = tplContent.replace(/\\/g, '\\')
                .replace(/\r?\n/g, '\\n')
                .replace(/'/g, '\\\'');
            var moduleCode = myJsBeautify(S.substitute(tplTemplate, {
                code: tplContent
            }));
            fs.writeFileSync(modulePath, moduleCode, encoding);
            console.info('generate tpl module: ' + modulePath +
                ' at ' + (new Date().toLocaleString()));
        }
    }

    if (program.watch) {
        var watcher = chokidar.watch(packagePath, {ignored: /^\./, persistent: true});
        watcher.on('add', process).on('change', process);
    } else {
        var walk = require('walk');
        //noinspection JSUnresolvedFunction
        var walker = walk.walk(packagePath);
        walker.on('file', function (root, fileStats, next) {
            var filePath = normalizeSlash(root + '/' + fileStats.name);
            process(filePath);
            next();
        });
    }
});