Ext.data.JsonP.KISSY_JSON({"tagname":"class","name":"KISSY.JSON","autodetected":{},"files":[{"filename":"json.js","href":"json.html#KISSY-JSON"}],"singleton":true,"members":[{"name":"parse","tagname":"method","owner":"KISSY.JSON","id":"method-parse","meta":{}},{"name":"stringify","tagname":"method","owner":"KISSY.JSON","id":"method-stringify","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-KISSY.JSON","short_doc":"The Json object contains methods for converting values to JavaScript Object Notation (Json)\nand for converting Json t...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/json.html#KISSY-JSON' target='_blank'>json.js</a></div></pre><div class='doc-contents'><p>The Json object contains methods for converting values to JavaScript Object Notation (Json)\nand for converting Json to values.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-parse' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='KISSY.JSON'>KISSY.JSON</span><br/><a href='source/json.html#KISSY-JSON-method-parse' target='_blank' class='view-source'>view source</a></div><a href='#!/api/KISSY.JSON-method-parse' class='name expandable'>parse</a>( <span class='pre'>text, [reviver]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Parse a string as Json, optionally transforming the value produced by parsing. ...</div><div class='long'><p>Parse a string as Json, optionally transforming the value produced by parsing.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><div class='sub-desc'><p>The string to parse as Json.</p>\n</div></li><li><span class='pre'>reviver</span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a> (optional)<div class='sub-desc'><p>If a function, prescribes how the value originally produced by parsing is transformed,\nbefore being returned.</p>\n</div></li></ul></div></div></div><div id='method-stringify' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='KISSY.JSON'>KISSY.JSON</span><br/><a href='source/json.html#KISSY-JSON-method-stringify' target='_blank' class='view-source'>view source</a></div><a href='#!/api/KISSY.JSON-method-stringify' class='name expandable'>stringify</a>( <span class='pre'>value, [replacer], [space]</span> ) : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Convert a value to Json, optionally replacing values if a replacer function is specified,\nor optionally including onl...</div><div class='long'><p>Convert a value to Json, optionally replacing values if a replacer function is specified,\nor optionally including only the specified properties if a replacer array is specified.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><div class='sub-desc'><p>The value to convert to a Json string.</p>\n</div></li><li><span class='pre'>replacer</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>The replacer parameter can be either a function or an array. As a function, it takes two parameters, the key and the value being stringified. Initially it gets called with an empty key representing the object being stringified, and it then gets called for each property on the object or array being stringified. It should return the value that should be added to the Json string, as follows:</p>\n\n<ul>\n<li>If you return a Number, the string corresponding to that number is used as the value for the property when added to the Json string.</li>\n<li>If you return a String, that string is used as the property's value when adding it to the Json string.</li>\n<li>If you return a Boolean, \"true\" or \"false\" is used as the property's value, as appropriate, when adding it to the Json string.</li>\n<li>If you return any other object, the object is recursively stringified into the Json string, calling the replacer function on each property, unless the object is a function, in which case nothing is added to the Json string.</li>\n<li>If you return undefined, the property is not included in the output Json string.</li>\n</ul>\n\n\n<p><strong>Note:</strong> You cannot use the replacer function to remove values from an array. If you return undefined or a function then null is used instead.</p>\n</div></li><li><span class='pre'>space</span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a> (optional)<div class='sub-desc'><p>space Causes the resulting string to be pretty-printed.\nThe space argument may be used to control spacing in the final string.\nIf it is a number, successive levels in the stringification will each be indented by this many space characters (up to 10).\nIf it is a string, successive levels will indented by this string (or the first ten characters of it).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});